from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    ConversationHandler, MessageHandler, filters, JobQueue
)
import json
import os
from datetime import datetime, timedelta
import re
from zoneinfo import ZoneInfo

EVENTS_FILE = os.path.join(os.path.dirname(__file__), "events.json")
TASKS_FILE = os.path.join(os.path.dirname(__file__), "tasks.json")
USERS_FILE = os.path.join(os.path.dirname(__file__), "users.json")
ADMIN_ID = 1847178297

SELECT_PROJECT, SELECT_TASK, CONFIRM = range(3)

month_names = {
    1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è", 5: "–º–∞—è", 6: "–∏—é–Ω—è",
    7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞", 9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
}

WORK_TZ = ZoneInfo("Europe/Kiev") 

async def check_user_membership(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = load_json("users.json")
    user_id = update.effective_user.id if update.effective_user else None
    if not user_id:
        return False

    user = next((u for u in users if u["user_id"] == user_id), None)
    if not user:
        await update.message.reply_text(
            "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @StanPaige."
        )
        return False
    return True

def format_datetime_rus(dt: datetime) -> str:
    return f"{dt.day} {month_names[dt.month]} –≤ {dt.strftime('%H:%M')}"

def recalculate_percent_rates():
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            users = json.load(f)

        total_points = sum(user["points"] for user in users if user["points"] > 0)

        if total_points == 0:
            for user in users:
                user["percent_rate"] = 0.0
        else:
            for user in users:
                user["percent_rate"] = round(user["points"] / total_points, 3)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ç—ã—Å—è—á–Ω—ã—Ö

        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(users, f, ensure_ascii=False, indent=2)

        print("‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–µ —Å—Ç–∞–≤–æ–∫: {e}")

def add_points(user_id: int, points: int):
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            users = json.load(f)

        for user in users:
            if user["user_id"] == user_id:
                user["points"] += points
                break
        else:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(users, f, ensure_ascii=False, indent=2)

        recalculate_percent_rates()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤: {e}")

def load_json(path):
    try:
        with open(path, 'r', encoding='utf-8') as f:
            data = json.load(f)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ {path}")
            return data
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        return []
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ {path}: {e}")
        return []
    except Exception as e:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {path}: {e}")
        return []

def save_json(path, data):
    try:
        with open(path, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(data)} –æ–±—ä–µ–∫—Ç–æ–≤ –≤ {path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ {path}: {e}")

async def safe_reply(update: Update, context: ContextTypes.DEFAULT_TYPE,
                     text: str, markup=None):
    """
    –£–¥–æ–±–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è reply_text/callback_query.reply_text/send_message,
    –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≥–¥–µ —É –Ω–∞—Å –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∏ –Ω–µ –ø–∞–¥–∞–µ—Ç –Ω–∞ None.
    """
    try:
        if update.message:
            return await update.message.reply_text(text, reply_markup=markup)
        if update.callback_query and update.callback_query.message:
            return await update.callback_query.message.reply_text(text, reply_markup=markup)
        if update.effective_chat:
            return await context.bot.send_message(
                chat_id=update.effective_chat.id, text=text, reply_markup=markup
            )
    except Exception as e:
        print("‚ùå safe_reply error:", e)

async def event_auto_notify(context: ContextTypes.DEFAULT_TYPE):
    events = load_json(EVENTS_FILE)
    users = load_json(USERS_FILE)
    tasks = load_json(TASKS_FILE)
    now = datetime.now(WORK_TZ)

    changed = False

    for event in events[:]:
        try:
            dt = datetime.fromisoformat(event["datetime"])
            delta = dt - now

            if not event.get("notify_users"):
                continue

            # –ó–∞ 24 —á–∞—Å–∞
            if 23 <= delta.total_seconds() / 3600 <= 25 and not event.get("notified_24h"):
                await send_event_notification(event, users, context, "24")
                event["notified_24h"] = True
                changed = True

            # –ó–∞ 2 —á–∞—Å–∞
            if 1.5 <= delta.total_seconds() / 3600 <= 2.5 and not event.get("notified_2h"):
                await send_event_notification(event, users, context, "2")
                event["notified_2h"] = True
                changed = True
            
             # ‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            if now >= dt:
                if event["type"] == "meeting":
                    # –†–∞—Å—Å—ã–ª–∫–∞ –æ –Ω–∞—á–∞–ª–µ —Å–æ–±—Ä–∞–Ω–∏—è
                    await send_event_message(event, users, context, f"üì£ –°–æ–±—Ä–∞–Ω–∏–µ \"{event['title']}\" –Ω–∞—á–∞–ª–æ—Å—å!")
                elif event["type"] == "deadline":
                    # –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á—É –∏ —Å–Ω—è—Ç—å –µ—ë —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    task_id = event.get("task_id")
                    if task_id:
                        for t in tasks:
                            if t["id"] == task_id:
                                reserved_by = t.get("reserved_by")
                                if reserved_by:
                                    for u in users:
                                        if reserved_by == u["user_id"]:
                                            if "reserved_tasks" in u and task_id in u["reserved_tasks"]:
                                                u["reserved_tasks"].remove(task_id)
                                t["reserved_by"] = None
                                t["deadline"] = None
                                break

                        await send_event_message(event, users, context, 
                            f"‚è∞ –î–µ–¥–ª–∞–π–Ω –ø–æ –∑–∞–¥–∞—á–µ \"{event['title']}\" –∏—Å—Ç—ë–∫!\n"
                            "–ó–∞–¥–∞—á–∞ –∏–∑—ã–º–∞–µ—Ç—Å—è –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.")

                    changed = True

                # –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
                events.remove(event)
                changed = True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–æ–ø–æ–≤–µ—â–µ–Ω–∏—è: {e}")

    if changed:
        save_json(EVENTS_FILE, events)
        save_json(TASKS_FILE, tasks)
        save_json(USERS_FILE, users)

async def send_event_notification(event, users, context, when_str):
    dt = datetime.fromisoformat(event['datetime'])
    simple_time = f"{dt.day} {month_names[dt.month]} –≤ {dt.strftime('%H:%M')}"
    event_text = (
        f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –î–æ —Å–æ–±—ã—Ç–∏—è <b>{event['title']}</b> –æ—Å—Ç–∞–ª–æ—Å—å {when_str} —á–∞—Å–∞(–æ–≤)!\n\n"
        f"üïí –ö–æ–≥–¥–∞: {simple_time}\n\n"
        f"{event['description']}"
    )
    success, failed = 0, 0

    for u in users:
        if event.get("personal") and u["user_id"] not in event.get("users", []):
            continue

        try:
            await context.bot.send_message(chat_id=u["user_id"], text=event_text, parse_mode="HTML")
            success += 1
        except Exception as e:
            failed += 1
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {u['full_name']}: {e}")

    print(f"üì£ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Å–æ–±—ã—Ç–∏—é #{event['id']} ({when_str}h): –£—Å–ø–µ—à–Ω–æ: {success}, –û—à–∏–±–æ–∫: {failed}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_user_membership(update, context):
        return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ ‚Äî –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë–º
    message = update.effective_message
    if message:
        await message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π –¥—Ä—É–≥ –º–æ–π. –¢—ã —Å—Ç–∞–ª —á–∞—Å—Ç—å—é –Ω–∞—à–µ–≥–æ –æ–±–∏—Ç–µ–ª—è. –ü–æ–∑–≤–æ–ª—å –º–Ω–µ —Ç–µ–±—è —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å –≤ —Ç–≤–æ–µ–º –≥—Ä—è–¥—É—â–µ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–∞ —á—Ç–æ —Ç—ã —Å–ø–æ—Å–æ–±–µ–Ω")

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_user_membership(update, context):
        return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ ‚Äî –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë–º
    help_text = (
        "üìñ <b>–°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π:</b>\n\n"
        "/start ‚Äì –º–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. –ù–∏—á–µ–≥–æ –Ω–µ –æ–±—ã—á–Ω–æ–≥–æ\n"
        "/help ‚Äì –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–±–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è\n"
        "/upcoming_events ‚Äì —É–≤–∏–¥–µ—Ç—å –±—É–¥—É—â–µ–µ. –£–∑–Ω–∞—Ç—å –≤—Å–µ –≥—Ä—è–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏\n"
        "/my_points ‚Äì –ª–∏—Ü–µ–∑—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Ç—Ä—É–¥. –°–∫–æ–ª—å–∫–æ –∂–µ —Ç—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª –±–∞–ª–ª–æ–≤ –∑–∞ —Å–≤–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ?\n"
        "/my_task ‚Äì –ø–æ–Ω—è—Ç—å –∫–∞–∫–æ–≤–∞ —Ç–≤–æ—è –º–∏—Å—Å–∏—è —Å–µ–π—á–∞—Å. –ö–∞–∫—É—é —Ä–∞–±–æ—Ç—É —Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ—à—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç?\n"
        "/get_task - –≤–∑—è—Ç—å —Å–µ–±–µ –Ω–æ–≤—É—é –º–∏—Å—Å–∏—é, –µ—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–æ, —Å—É–¥—å–±–∞ —É–∂–µ –Ω–µ –¥–∞–ª–∞ —Ç–µ–±–µ –µ–µ"
        # –°—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –±—É–¥—É—â–µ–º
    )
    message = update.effective_message
    if message:
        await message.reply_text(help_text, parse_mode="HTML")

async def add_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_user_membership(update, context):
        return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ ‚Äî –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë–º
    user = update.effective_user
    message = update.effective_message
    if not message or not user:
        return
    
    if user.id != ADMIN_ID:
        await message.reply_text("‚ùå –¢—ã —Å–ª–∏—à–∫–æ–º —Å–ª–∞–± —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ")
        return

    if not context.args:
        await message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ —Ç–∞–∫:\n<code>/add_event meeting;–°–æ–±—Ä–∞–Ω–∏–µ;–û–ø–∏—Å–∞–Ω–∏–µ;2025-06-20T18:00:00</code>", parse_mode="HTML")
        return

    try:
        raw_input = " ".join(context.args)
        parts = raw_input.split(";")
        if len(parts) < 4:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

        event_type, title, description, dt_str = parts[:4]
        datetime_obj = datetime.fromisoformat(dt_str)

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
        if os.path.exists(EVENTS_FILE):
            with open(EVENTS_FILE, "r", encoding="utf-8") as f:
                events = json.load(f)
        else:
            events = []

        # –ù–æ–≤—ã–π ID
        new_id = max([e["id"] for e in events], default=0) + 1

        new_event = {
            "id": new_id,
            "type": event_type,
            "title": title,
            "description": description,
            "datetime": dt_str,
            "notify_users": True
        }

        events.append(new_event)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        with open(EVENTS_FILE, "w", encoding="utf-8") as f:
            json.dump(events, f, ensure_ascii=False, indent=2)

        await message.reply_text(f"‚úÖ –Ø –¥–æ–±–∞–≤–∏–ª –≥—Ä—è–¥—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ:\n<b>{title}</b> ({event_type})", parse_mode="HTML")

    except Exception as e:
        await message.reply_text(f"‚ùå –í–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏: {e}")

async def notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_user_membership(update, context):
        return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ ‚Äî –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë–º
    user = update.effective_user
    message = update.effective_message
    if not user or not message:
        return

    if user.id != ADMIN_ID:
        await message.reply_text("‚ùå –¢—ã —Å–ª–∏—à–∫–æ–º —Å–ª–∞–± —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ")
        return

    if not context.args:
        await message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏ ID —Å–æ–±—ã—Ç–∏—è. –ü—Ä–∏–º–µ—Ä: /notify 1")
        return

    event_id = int(context.args[0])

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è
    if not os.path.exists(EVENTS_FILE):
        await message.reply_text("‚ùå –§–∞–π–ª —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    with open(EVENTS_FILE, "r", encoding="utf-8") as f:
        events = json.load(f)

    event = next((e for e in events if e["id"] == event_id), None)
    if not event:
        await message.reply_text("‚ùå –°–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    month_names = {
        1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è", 5: "–º–∞—è", 6: "–∏—é–Ω—è",
        7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞", 9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
    }
    dt = datetime.fromisoformat(event['datetime'])
    simple_time = f"{dt.day} {month_names[dt.month]} –≤ {dt.strftime('%H:%M')}"
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    event_text = (
        f"üì¢ <b>{event['title']}</b>\n\n"
        f"üïí –ö–æ–≥–¥–∞: {simple_time}\n\n"
        f"{event['description']}"
    )

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not os.path.exists(USERS_FILE):
        await message.reply_text("‚ùå –§–∞–π–ª users.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    with open(USERS_FILE, "r", encoding="utf-8") as f:
        users = json.load(f)

    # –†–∞—Å—Å—ã–ª–∫–∞
    success, failed = 0, 0
    for u in users:
        try:
            # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if event.get("personal", False) and u["user_id"] not in event.get("users", []):
                continue

            await context.bot.send_message(chat_id=u["user_id"], text=event_text, parse_mode="HTML")
            success += 1
        except Exception as e:
            failed += 1
            print(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {u['full_name']} ({u['user_id']}): {e}")

    await message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø–µ—à–Ω–æ: {success} | –û—à–∏–±–æ–∫: {failed}")

async def upcoming_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_user_membership(update, context):
        return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ ‚Äî –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë–º
    user = update.effective_user
    chat = update.effective_chat

    if user is None or chat is None:
        print("‚ùå update.effective_user –∏–ª–∏ update.effective_chat –≤–µ—Ä–Ω—É–ª–∏ None")
        return
    
    user_id = user.id

    try:
        with open(EVENTS_FILE, "r", encoding="utf-8") as f:
            events = json.load(f)
    except Exception as e:
        await context.bot.send_message(chat_id=chat.id, text=f"‚ö†Ô∏è –ö–∞–∫–∏–µ —Ç–æ —Å–∏–ª—ã –º–µ—à–∞—é—Ç –º–Ω–µ –≤–∏–¥–µ—Ç—å –±—É–¥—É—â–µ–µ:\n<code>{e}</code>", parse_mode="HTML")
        return

    now = datetime.now(WORK_TZ)

    # –û—Ç–±–∏—Ä–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (–æ–±—â–∏–µ –∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º —é–∑–µ—Ä–∞)
    upcoming = []
    for event in events:
        try:
            dt = datetime.fromisoformat(event["datetime"])
            if dt < now:
                continue

            is_personal = event.get("personal", False)
            if not is_personal or (is_personal and user_id in event.get("users", [])):
                upcoming.append((dt, event))
        except:
            continue

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 5 –±–ª–∏–∂–∞–π—à–∏—Ö
    upcoming.sort(key=lambda e: e[0])
    upcoming = upcoming[:5]

    if not upcoming:
        await context.bot.send_message(chat_id=chat.id, text="üòå –í–∏–¥–∏–º–æ –≤ –±—É–¥—É—â–µ–º —Ç–µ–±—è –Ω–µ –∂–¥—É—Ç –∫–∞–∫–∏–µ –ª–∏–±–æ —Å–æ–±—ã—Ç–∏—è.")
        return

    text = "<b>üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è:</b>\n\n"
    for dt, event in upcoming:
        date_str = format_datetime_rus(dt)
        text += f"üì¢ <b>{event['title']}</b>\nüïí {date_str}\n{event['description']}\n\n"

    await context.bot.send_message(chat_id=chat.id, text=text.strip(), parse_mode="HTML")

async def give_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_user_membership(update, context):
        return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ ‚Äî –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë–º
    if not update.message or not update.effective_user:
        return

    user = update.effective_user
    args = context.args if context.args else []

    if user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢—ã —Å–ª–∏—à–∫–æ–º —Å–ª–∞–± —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ")
        return

    if len(args) < 4:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /give_points <username> <–ø—Ä–æ–µ–∫—Ç> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>\n"
            "–ü—Ä–∏–º–µ—Ä: /give_points Franky126866 \"Starky Jungle\" 20")
        return

    username = args[0].lstrip("@")
    project = args[1].strip()
    try:
        points = int(args[2])
    except ValueError:
        await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            users = json.load(f)

        for user_data in users:
            if user_data["username"].lower() == username.lower():
                user_data.setdefault("points", {}).setdefault(project, 0)
                user_data["points"][project] += points
                break
        else:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(users, f, ensure_ascii=False, indent=2)

        recalculate_percent_rates()
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} –¥–æ–±–∞–≤–ª–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç <b>{project}</b>.",
            parse_mode="HTML")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def my_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_user_membership(update, context):
        return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ ‚Äî –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë–º
    if not update.message or not update.effective_user:
        return

    tg_user_id = update.effective_user.id

    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            users = json.load(f)

        for user in users:
            if user.get("user_id") == tg_user_id:
                text = "üìä <b>–¢–≤–æ–∏ –±–∞–ª–ª—ã –∏ —Å—Ç–∞–≤–∫–∏:</b>\n\n"

                points_dict = user.get("points", {})
                percent_dict = user.get("percent_rate", {})

                for project in points_dict.keys():
                    points = points_dict.get(project, 0)
                    percent = percent_dict.get(project, 0) * 100
                    text += f"üîπ <b>{project}</b>: {points} –±–∞–ª–ª–æ–≤ ({round(percent)}%)\n"
                await update.message.reply_text(text, parse_mode="HTML")
                return

        await update.message.reply_text("‚ùå –¢—ã –ø–æ—á–µ–º—É —Ç–æ –æ—Ç—Å—Ç—É—Ç—Å—Ç–≤—É–µ—à—å –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–µ–µ—Å—Ç—Ä–∞ –∏–º–ø–µ—Ä–∏–∏.")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def check_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_user_membership(update, context):
        return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ ‚Äî –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë–º
    if not update.message or not update.effective_user:
        return

    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢—ã —Å–ª–∏—à–∫–æ–º —Å–ª–∞–± —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ")
        return

    if not context.args or len(context.args) < 1:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /check_points <username>")
        return

    username = context.args[0].lstrip("@")

    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            users = json.load(f)

        for user in users:
            if user["username"].lower() == username.lower():
                text = f"üìä <b>–ë–∞–ª–ª—ã @{username}:</b>\n\n"

                points_dict = user.get("points", {})
                percent_dict = user.get("percent_rate", {})

                for project in points_dict.keys():
                    points = points_dict.get(project, 0)
                    percent = percent_dict.get(project, 0) * 100
                    text += f"üîπ <b>{project}</b>: {points} –±–∞–ª–ª–æ–≤ ({round(percent)}%)\n"
                await update.message.reply_text(text, parse_mode="HTML")
                return

        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def get_task_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_user_membership(update, context):
        return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ ‚Äî –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë–º
    users = load_json("users.json")
    user_id = update.effective_user.id if update.effective_user else None
    user = next((u for u in users if u["user_id"] == user_id), None)

    if not user:
        await safe_reply(update, context, "‚ö†Ô∏è –ü–æ—á–µ–º—É —Ç–µ–±—è –Ω–µ—Ç –≤ —Ä–µ–µ—Å—Ç—Ä–µ –∏–º–ø–µ—Ä–∏–∏?")
        return ConversationHandler.END

    reserved = user.get("reserved_tasks", [])
    if len(reserved) >= 3:
        await safe_reply(update, context, "‚ö†Ô∏è –¢—ã –Ω–µ –º–æ–∂–µ—à—å –±—Ä–∞—Ç—å –±–æ–ª–µ–µ 3 –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!")
        return ConversationHandler.END

    # –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç
    projects = ["Starky Jungle", "Ideal Abyss", "Unsouled", "Non-project work"]
    context.user_data["user_id"] = user_id

    markup = ReplyKeyboardMarkup([[p] for p in projects], one_time_keyboard=True, resize_keyboard=True)
    await safe_reply(update, context, "üîß –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:", markup)
    return SELECT_PROJECT

async def select_project(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return ConversationHandler.END

    project = update.message.text
    context.user_data["project"] = project

    users = load_json("users.json")
    tasks = load_json("tasks.json")
    user_id = context.user_data["user_id"]
    user = next((u for u in users if u["user_id"] == user_id), None)

    if not user:
        return await safe_reply(update, context, "‚ö†Ô∏è –ö—Ç–æ —Ç—ã, –≤–æ–∏–Ω?")

    roles = [r.lower() for r in user.get("roles", [])]

    relevant_tasks = [
        t for t in tasks
        if t.get("project") == project and
           t.get("reserved_by") is None and
           t.get("type", "").lower() in roles
    ]

    if not relevant_tasks:
        await safe_reply(update, context, "üòî –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏—Å—Å–∏–π –¥–ª—è —Ç–≤–æ–µ–π —Ä–æ–ª–∏")
        return ConversationHandler.END

    msg = "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
    for t in relevant_tasks:
        estimated_days = t.get("estimated_days", 7)
        if estimated_days >= 7:
            weeks = estimated_days // 7
            days = estimated_days % 7
            if days == 0:
                time_str = f"{weeks} –Ω–µ–¥."
            else:
                time_str = f"{weeks} –Ω–µ–¥. {days} –¥–Ω."
        else:
            time_str = f"{estimated_days} –¥–Ω."
        msg += (f"üîπ <b>{t['title']}</b> (#{t['id']})\n"
                f"üìÑ {t['description']}\n"
                f"üìÇ –¢–∏–ø: {t['type']}\n"
                f"üèÜ –ë–∞–ª–ª—ã: {t['points']}\n"
                f"‚è∞ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {time_str}\n\n")

    await safe_reply(update, context, msg, markup=ReplyKeyboardRemove())
    await safe_reply(update, context, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å")
    return SELECT_TASK

async def select_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return ConversationHandler.END

    try:
        task_id = int(update.message.text)
        context.user_data["task_id"] = task_id
    except (ValueError, TypeError):
        await safe_reply(update, context, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏")
        return SELECT_TASK  # —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥

    await safe_reply(update, context, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –∑–∞–¥–∞—á—É #{task_id}? –ù–∞–ø–∏—à–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")
    return CONFIRM

async def confirm_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return ConversationHandler.END

    answer = update.message.text.lower()
    if answer != "–¥–∞":
        await safe_reply(update, context, "‚ùå –í—ã–±–æ—Ä –æ—Ç–º–µ–Ω—ë–Ω")
        return ConversationHandler.END

    task_id = context.user_data.get("task_id")
    user_id = context.user_data.get("user_id")

    if not task_id or not user_id:
        return await safe_reply(update, context, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä")

    tasks = load_json("tasks.json")
    users = load_json("users.json")
    events = load_json("events.json")
    
    user = next((u for u in users if u["user_id"] == user_id), None)
    reserved = user.get("reserved_tasks", []) if user else []

    if len(reserved) >= 3:
        await safe_reply(update, context, "‚ö†Ô∏è –¢—ã –Ω–µ –º–æ–∂–µ—à—å –∏–º–µ—Ç—å –±–æ–ª–µ–µ 3 –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!")
        return ConversationHandler.END

    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 1, –Ω–æ –º–µ–Ω—å—à–µ 3 –∏ –Ω–µ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if len(reserved) >= 1 and not context.user_data.get("confirmed_multiple"):
        context.user_data["confirmed_multiple"] = True
        await safe_reply(update, context,
            "‚ö†Ô∏è –¢—ã –±–µ—Ä–µ—à—å –µ—â—ë –æ–¥–Ω—É –∑–∞–¥–∞—á—É.\n"
            "–ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω: –±–æ–ª–µ–µ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –º–æ–∂–µ—Ç —É—Å–ª–æ–∂–Ω–∏—Ç—å —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É.\n"
            "–¢—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω? –ù–∞–ø–∏—à–∏ –µ—â—ë —Ä–∞–∑ '–¥–∞' —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å."
        )
        return CONFIRM
    
    deadline = None
    for task in tasks:
        if task["id"] == task_id:
            task["reserved_by"] = user_id

            # –ï—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω–∞ –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ
            if not task.get("deadline"):
                estimated_days = task.get("estimated_days", 7)
                new_deadline = datetime.now(WORK_TZ) + timedelta(days=estimated_days)
                task["deadline"] = new_deadline.isoformat()
                deadline = task["deadline"]
            else:
                deadline = task["deadline"]
            break

    for user in users:
        if user["user_id"] == user_id:
            user.setdefault("reserved_tasks", []).append(task_id)
            break

    if deadline:
        events.append({
            "id": max([e["id"] for e in events], default=0) + 1,
            "type": "deadline",
            "title": f"–î–µ–¥–ª–∞–π–Ω –ø–æ –∑–∞–¥–∞—á–µ #{task_id}",
            "description": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–∞–±–æ—Ç—É –≤ —Å—Ä–æ–∫.",
            "datetime": deadline,
            "notify_users": True,
            "personal": True,
            "users": [user_id],
            "task_id": task_id
        })

    save_json("tasks.json", tasks)
    save_json("users.json", users)
    save_json("events.json", events)

    await safe_reply(update, context, "‚úÖ –ú–∏—Å—Å–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–ø–µ—Ä—å –≤–∞–º. –ü—Ä–æ—è–≤–∏—Ç–µ —Å–µ–±—è –¥–æ—Å—Ç–æ–π–Ω–æ!")
    return ConversationHandler.END

async def my_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_user_membership(update, context):
        return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ ‚Äî –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë–º
    user_id = update.effective_user.id
    users = load_json("users.json")
    tasks = load_json("tasks.json")

    user = next((u for u in users if u["user_id"] == user_id), None)
    if not user:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ—á–µ–º—É —Ç–µ–±—è –Ω–µ—Ç –≤ —Ä–µ–µ—Å—Ç—Ä–µ –∏–º–ø–µ—Ä–∏–∏?")
        return

    # –ù–∞–π–¥–µ–º –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    reserved_tasks = [t for t in tasks if t.get("reserved_by") == user_id]

    if not reserved_tasks:
        await update.message.reply_text(
            "üòî –í—ã –Ω–µ –æ–±—Ä–µ–º–µ–Ω–µ–Ω—ã –º–∏—Å—Å–∏–µ–π\n"
            "–ß—Ç–æ–±—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ /get_task"
        )
        return

    msg = "üìù –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:\n\n"
    for t in reserved_tasks:
        # ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç null –¥–µ–¥–ª–∞–π–Ω–∞
        if t.get("deadline"):
            dt = datetime.fromisoformat(t["deadline"])
            date_str = f"{dt.day} {month_names[dt.month]} –≤ {dt.strftime('%H:%M')}"
        else:
            date_str = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        msg += (f"üîπ <b>{t['title']}</b> (#{t['id']})\n"
                f"üìÑ {t['description']}\n"
                f"üìÇ –¢–∏–ø: {t['type']}\n"
                f"üèÜ –ë–∞–ª–ª—ã: {t['points']}\n"
                f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {date_str}\n\n")

    await update.message.reply_text(msg, parse_mode="HTML")

async def search_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_user_membership(update, context):
        return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ ‚Äî –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë–º
    user_id = update.effective_user.id
    users = load_json("users.json")
    tasks = load_json("tasks.json")

    user = next((u for u in users if u["user_id"] == user_id), None)
    if not user or "admin" not in user.get("roles", []) and user.get("role") != "admin":
        await update.message.reply_text("‚ùå –¢—ã —Å–ª–∏—à–∫–æ–º —Å–ª–∞–± —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã (–∞—Ä–≥—É–º–µ–Ω—Ç—ã)
    args = context.args  # —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ /search_task

    filtered_tasks = tasks

    # –ù–∞–ø—Ä–∏–º–µ—Ä, —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É: reserved/unreserved
    if args:
        arg = args[0].lower()
        if arg == "reserved":
            filtered_tasks = [t for t in tasks if t.get("reserved_by") is not None]
        elif arg == "unreserved":
            filtered_tasks = [t for t in tasks if t.get("reserved_by") is None]
        elif arg == "deadline":
            filtered_tasks = sorted(tasks, key=lambda t: t.get("deadline") or "")

    if not filtered_tasks:
        await update.message.reply_text("‚ö†Ô∏è –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.")
        return

    msg = "üìã –í—Å–µ –∑–∞–¥–∞—á–∏:\n\n"
    for t in filtered_tasks:
        reserved_by = t.get("reserved_by")
        reserved_str = f"–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {reserved_by}" if reserved_by else "–°–≤–æ–±–æ–¥–Ω–∞"
        estimated_days = t.get("estimated_days", 7)
        if estimated_days >= 7:
            weeks = estimated_days // 7
            days = estimated_days % 7
            if days == 0:
                time_str = f"{weeks} –Ω–µ–¥."
            else:
                time_str = f"{weeks} –Ω–µ–¥. {days} –¥–Ω."
        else:
            time_str = f"{estimated_days} –¥–Ω."
        msg += (f"üîπ <b>{t['title']}</b> (#{t['id']})\n"
                f"üìÑ {t['description']}\n"
                f"üìÇ –¢–∏–ø: {t['type']}\n"
                f"üèÜ –ë–∞–ª–ª—ã: {t['points']}\n"
                f"‚è∞ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {time_str}\n"
                f"üìå –°—Ç–∞—Ç—É—Å: {reserved_str}\n\n")

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç –¢–µ–ª–µ–≥—Ä–∞–º–∞
    max_len = 4000
    for i in range(0, len(msg), max_len):
        await update.message.reply_text(msg[i:i+max_len], parse_mode="HTML")

async def task_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_user_membership(update, context):
        return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ ‚Äî –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë–º
    user_id = update.effective_user.id if update.effective_user else None
    users = load_json("users.json")
    tasks = load_json("tasks.json")
    events = load_json("events.json")  # –¥–æ–ø—É—Å—Ç–∏–º, —Å–æ–±—ã—Ç–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—ã–∑—ã–≤–∞—é—â–∏–π - –∞–¥–º–∏–Ω
    user = next((u for u in users if u["user_id"] == user_id), None)
    if not user or ("admin" not in user.get("roles", []) and user.get("role") != "admin"):
        await safe_reply(update, context, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã ‚Äî –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ID –∑–∞–¥–∞—á–∏
    if not context.args or not context.args[0].isdigit():
        await safe_reply(update, context, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: /task_done <ID>")
        return
    task_id = int(context.args[0])

    # –ù–∞–π–¥–µ–º –∑–∞–¥–∞—á—É –ø–æ ID
    task = next((t for t in tasks if t["id"] == task_id), None)
    if not task:
        await safe_reply(update, context, f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    reserved_by = task.get("reserved_by")
    tasks = [t for t in tasks if t["id"] != task_id]
    save_json(TASKS_FILE, tasks)

    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∏–≤–µ–Ω—Ç—ã –ø–æ task_id (–µ—Å–ª–∏ –µ—Å—Ç—å)
    events = [e for e in events if e.get("task_id") != task_id]
    save_json(EVENTS_FILE, events)
    
    if reserved_by:
        for u in users:
            if task_id in u.get("reserved_tasks", []):
                u["reserved_tasks"].remove(task_id)
                break
        save_json(USERS_FILE, users)

    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∏ —É–¥–∞–ª–µ–Ω–∞.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞
    if reserved_by:
        try:
            await context.bot.send_message(
                chat_id=reserved_by,
                text=(f"üéâ –ó–∞–¥–∞—á–∞ <b>{task['title']}</b> (#{task_id}) "
                      "–ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É —Ä–∞–±–æ—Ç—É!"),
                parse_mode="HTML"
            )
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

async def admin_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user or user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢—ã —Å–ª–∏—à–∫–æ–º —Å–ª–∞–± —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ")
        return

    help_text = (
        "üóùÔ∏è <b>–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/add_event ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n"
        "/notify ‚Äì —Ä–∞–∑–æ—Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏ –ø–æ ID\n"
        "/give_points ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã —É—á–∞—Å—Ç–Ω–∏–∫—É –ø–æ username\n"
        "/check_points ‚Äì –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–ª—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ username\n"
        "/search_task ‚Äì –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏ (—Ñ–∏–ª—å—Ç—Ä—ã: reserved/unreserved/deadline)\n"
        "/task_done ‚Äì –ø–æ–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∏ —É–¥–∞–ª–∏—Ç—å\n"
        "/edit_deadline ‚Äì —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞—á —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "/delete_event ‚Äì —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø–æ ID\n"
        "/add_task ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
        # –î–æ–ø–∏—à–∏ —Å—é–¥–∞ –¥—Ä—É–≥–∏–µ —Ç–≤–æ–∏ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    )
    await update.message.reply_text(help_text, parse_mode="HTML")

async def edit_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_user_membership(update, context):
        return
    
    user = update.effective_user
    if not user or user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢—ã —Å–ª–∏—à–∫–æ–º —Å–ª–∞–± —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ")
        return

    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫: /edit_deadline <ID –∑–∞–¥–∞—á–∏> <–Ω–æ–≤–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è>\n"
            "–ü—Ä–∏–º–µ—Ä: /edit_deadline 3 2025-07-15T18:00"
        )
        return

    try:
        task_id = int(context.args[0])
        new_dt_str = context.args[1]

        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –¥–∞–Ω–∞ –±–µ–∑ T, –Ω–æ —Å –ø—Ä–æ–±–µ–ª–æ–º, –∑–∞–º–µ–Ω—è–µ–º
        if " " in new_dt_str:
            new_dt_str = new_dt_str.replace(" ", "T")

        new_dt = datetime.fromisoformat(new_dt_str)

        tasks = load_json(TASKS_FILE)
        events = load_json(EVENTS_FILE)

        task = next((t for t in tasks if t["id"] == task_id), None)
        if not task:
            await update.message.reply_text(f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        task["deadline"] = new_dt.isoformat()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ
        event = next((e for e in events if e.get("task_id") == task_id), None)
        if event:
            event["datetime"] = new_dt.isoformat()
        else:
            new_event = {
                "id": max([e["id"] for e in events], default=0) + 1,
                "type": "deadline",
                "title": f"–î–µ–¥–ª–∞–π–Ω –ø–æ –∑–∞–¥–∞—á–µ #{task_id}",
                "description": "–û–±–Ω–æ–≤–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                "datetime": new_dt.isoformat(),
                "notify_users": True,
                "personal": True,
                "users": [task.get("reserved_by")] if task.get("reserved_by") else [],
                "task_id": task_id
            }
            events.append(new_event)

        save_json(TASKS_FILE, tasks)
        save_json(EVENTS_FILE, events)

        await update.message.reply_text(
            f"‚úÖ –î–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ #{task_id} –æ–±–Ω–æ–≤–ª—ë–Ω!\n"
            f"–ù–æ–≤–∞—è –¥–∞—Ç–∞: {format_datetime_rus(new_dt)}"
        )

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π ISO-—Ñ–æ—Ä–º–∞—Ç: 2025-07-15T18:00")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def delete_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_user_membership(update, context):
        return
    
    user = update.effective_user
    if not user or user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢—ã —Å–ª–∏—à–∫–æ–º —Å–ª–∞–± —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ")
        return

    if not context.args or len(context.args) < 1:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫: /delete_event <ID —Å–æ–±—ã—Ç–∏—è>\n–ü—Ä–∏–º–µ—Ä: /delete_event 2")
        return

    try:
        event_id = int(context.args[0])
        events = load_json(EVENTS_FILE)
        event = next((e for e in events if e["id"] == event_id), None)

        if not event:
            await update.message.reply_text(f"‚ùå –°–æ–±—ã—Ç–∏–µ —Å ID #{event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        events = [e for e in events if e["id"] != event_id]
        save_json(EVENTS_FILE, events)

        await update.message.reply_text(f"‚úÖ –°–æ–±—ã—Ç–∏–µ \"{event['title']}\" (ID #{event_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")

    except ValueError:
        await update.message.reply_text("‚ùå ID —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_user_membership(update, context):
        return

    user = update.effective_user
    if not user or user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢—ã —Å–ª–∏—à–∫–æ–º —Å–ª–∞–± —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ")
        return

    if not context.args:
        await update.message.reply_text(
            "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫:\n"
            "<code>/add_task project;title;description;type;points;estimated_days</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>/add_task Starky Jungle;–ù–æ–≤–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞;–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∫–∏;–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç;20;14</code>",
            parse_mode="HTML"
        )
        return

    try:
        raw_input = " ".join(context.args)
        parts = raw_input.split(";")
        if len(parts) < 6:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

        project = parts[0].strip()
        title = parts[1].strip()
        description = parts[2].strip()
        task_type = parts[3].strip()
        points = int(parts[4].strip())
        estimated_days = int(parts[5].strip())

        tasks = load_json(TASKS_FILE)
        new_id = max([t["id"] for t in tasks], default=0) + 1

        new_task = {
            "id": new_id,
            "project": project,
            "title": title,
            "description": description,
            "type": task_type,
            "points": points,
            "estimated_days": estimated_days,
            "deadline": None,
            "reserved_by": None
        }

        tasks.append(new_task)
        save_json(TASKS_FILE, tasks)

        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n\n"
            f"<b>{title}</b>\n"
            f"–ü—Ä–æ–µ–∫—Ç: {project}\n"
            f"–†–æ–ª—å: {task_type}\n"
            f"–ë–∞–ª–ª—ã: {points}\n"
            f"–û—Ü–µ–Ω–∫–∞: {estimated_days} –¥–Ω.",
            parse_mode="HTML"
        )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def get_task_handler():
    return ConversationHandler(
        entry_points=[CommandHandler("get_task", get_task_start)],
        states={
            SELECT_PROJECT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, select_project)
            ],
            SELECT_TASK: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, select_task)
            ],
            CONFIRM: [
                MessageHandler(
                    filters.Regex(re.compile(r"^(–¥–∞|–Ω–µ—Ç)$", re.IGNORECASE)),
                    confirm_task
                )
            ],
        },
        fallbacks=[],
        allow_reentry=True
    )


app = ApplicationBuilder().token("7833612109:AAGfBTL2pn5WqDoWLwFYA1cZBd-XF7VzJ_o").build()
job_queue = app.job_queue
job_queue.run_repeating(event_auto_notify, interval=300, first=10)
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("admin_help", admin_help))
app.add_handler(CommandHandler("add_event", add_event))
app.add_handler(CommandHandler("notify", notify))
app.add_handler(CommandHandler("upcoming_events", upcoming_events))
app.add_handler(CommandHandler("give_points", give_points))
app.add_handler(CommandHandler("my_points", my_points))
app.add_handler(CommandHandler("check_points", check_points))
app.add_handler(CommandHandler("my_task", my_task))
app.add_handler(CommandHandler("search_task", search_task))
app.add_handler(CommandHandler("task_done", task_done))
app.add_handler(CommandHandler("edit_deadline", edit_deadline))
app.add_handler(CommandHandler("delete_event", delete_event))
app.add_handler(CommandHandler("add_task", add_task))
app.add_handler(get_task_handler())
app.run_polling()
